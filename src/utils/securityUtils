// src/utils/securityUtils.js
// This file contains functions to detect and analyze suspicious patterns in user messages. Has not yet been implemented in TempChatAppContainer or evals. 
//TODO: this is a temporary file that will be replaced with a more sophisticated system for detecting and analyzing suspicious patterns in user messages that also is bilingual so the words should be in json files that are loaded into the system.       
//TODO: add this to the admin page so we can see the patterns and adjust them as needed 
//TODO: add a function to the eval system that loads in files of queries for analysis and then runs the analysis 

export const jailbreakPatterns = {
  // Words often used in manipulation attempts
  suspiciousWords: [
    'instructions', 
    'limitations',
    'ignore',
    'override',
    'bypass',
    'convince',
    'pretend',
    'roleplay',
    'summarize our',
    'our conversation',
    'logical flaws',
    'contradictions'
  ],
  
  // Patterns that might indicate manipulation
  manipulationPatterns: [
    /can you try/i,
    /have you tried/i,
    /why can't you/i,
    /you already did/i,
    /but you did before/i,
    /that doesn't make sense/i
  ]
};

export const checkMessageSecurity = (message) => {
  let flagCount = 0;
  
  // Check for suspicious words
  jailbreakPatterns.suspiciousWords.forEach(word => {
    if (message.toLowerCase().includes(word)) {
      flagCount++;
    }
  });
  
  // Check for manipulation patterns
  jailbreakPatterns.manipulationPatterns.forEach(pattern => {
    if (pattern.test(message)) {
      flagCount++;
    }
  });
  
  return {
    isSuspicious: flagCount >= 2,
    flagCount
  };
};

// Track conversation metrics
export const analyzeConversationMetrics = (conversationHistory) => {
  const metrics = {
    rapidFireQuestions: 0,
    argumentativeResponses: 0,
    topicDrift: 0
  };
  
  if (conversationHistory.length >= 2) {
    // Check time between messages (rapid-fire detection)
    const timeGaps = [];
    for (let i = 1; i < conversationHistory.length; i++) {
      const gap = conversationHistory[i].timestamp - conversationHistory[i-1].timestamp;
      if (gap < 10000) { // less than 10 seconds
        metrics.rapidFireQuestions++;
      }
    }
    
    // Check for argumentative patterns
    metrics.argumentativeResponses = conversationHistory.filter(msg => 
      msg.text.includes('but') || 
      msg.text.includes('however') || 
      msg.text.includes('wrong') ||
      msg.text.includes('incorrect')
    ).length;
    
    // Check for topic drift away from GC content
    metrics.topicDrift = conversationHistory.filter(msg =>
      !msg.text.toLowerCase().includes('canada') &&
      !msg.text.toLowerCase().includes('government') &&
      !msg.text.toLowerCase().includes('federal')
    ).length;
  }
  
  return metrics;
};